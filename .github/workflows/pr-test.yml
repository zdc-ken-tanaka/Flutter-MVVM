# =============================================================================
# PR Test Workflow - プルリクエスト自動分析・コメント投稿テスト
# =============================================================================
# 目的: PRトリガーでマークダウン+Mermaid図表をテストし、Claude Code統合準備
# 動作: PR作成時に自動でリッチなレポートコメントを投稿

name: PR Test Workflow

# PRイベントトリガー設定
on:
  pull_request:
    types: [opened, synchronize, reopened]  # PR作成・更新・再オープン時

jobs:
  pr-test:
    runs-on: ubuntu-latest
    
    # 権限設定（PRコメント投稿に必要）
    permissions:
      contents: read        # リポジトリ内容の読み取り
      pull-requests: write  # PRコメント投稿権限
    
    steps:
      # =========================================================================
      # Step 1: リポジトリのチェックアウト
      # =========================================================================
      # 目的: PR変更内容を解析するためリポジトリ全体をrunner上に取得
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴取得（差分比較に必要）

      # =========================================================================
      # Step 2: PR基本情報の表示（ログ用）
      # =========================================================================
      # 目的: デバッグ・確認用にPR情報をActions実行ログに出力
      - name: Display PR Information
        run: |
          echo "🎯 PR Information"
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Author: ${{ github.event.pull_request.user.login }}"
          echo "Base Branch: ${{ github.event.pull_request.base.ref }}"
          echo "Head Branch: ${{ github.event.pull_request.head.ref }}"

      # =========================================================================
      # Step 3: 変更ファイル一覧表示（ログ用）
      # =========================================================================
      # 目的: どのファイルが変更されたかをActions実行ログに出力
      - name: List Changed Files
        run: |
          echo "📁 Changed Files:"
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }}

      # =========================================================================
      # Step 4: 固定マークダウンコメント生成
      # =========================================================================
      # 目的: シンプルなマークダウンテスト（YAML構文エラー回避）
      - name: Create Simple Markdown Comment
        id: markdown
        run: |
          # エコーを使って直接マークダウンを作成（ヒアドキュメント回避）
          echo "# 🚀 自動PR分析レポート" > /tmp/comment.md
          echo "" >> /tmp/comment.md
          echo "## 📊 PR統計情報" >> /tmp/comment.md
          echo "" >> /tmp/comment.md
          echo "- **PR番号:** 123" >> /tmp/comment.md
          echo "- **タイトル:** テスト用プルリクエスト" >> /tmp/comment.md
          echo "- **作成者:** test-user" >> /tmp/comment.md
          echo "- **変更ファイル数:** 5ファイル" >> /tmp/comment.md
          echo "" >> /tmp/comment.md
          echo "## 🔄 PRワークフロー" >> /tmp/comment.md
          echo "" >> /tmp/comment.md
          echo '```mermaid' >> /tmp/comment.md
          echo 'graph TD' >> /tmp/comment.md
          echo '    A[開発者] --> B[PR作成]' >> /tmp/comment.md
          echo '    B --> C[GitHub Actions]' >> /tmp/comment.md
          echo '    C --> D[コード分析]' >> /tmp/comment.md
          echo '    D --> E[レビュー]' >> /tmp/comment.md
          echo '    E --> F[マージ]' >> /tmp/comment.md
          echo '```' >> /tmp/comment.md
          echo "" >> /tmp/comment.md
          echo "## 📈 シーケンス図" >> /tmp/comment.md
          echo "" >> /tmp/comment.md
          echo '```mermaid' >> /tmp/comment.md
          echo 'sequenceDiagram' >> /tmp/comment.md
          echo '    participant A as 開発者' >> /tmp/comment.md
          echo '    participant B as GitHub' >> /tmp/comment.md
          echo '    A->>B: PR作成' >> /tmp/comment.md
          echo '    B->>A: レビュー依頼' >> /tmp/comment.md
          echo '    A->>B: 修正対応' >> /tmp/comment.md
          echo '    B->>A: マージ完了' >> /tmp/comment.md
          echo '```' >> /tmp/comment.md
          echo "" >> /tmp/comment.md
          echo "## ✅ チェックリスト" >> /tmp/comment.md
          echo "" >> /tmp/comment.md
          echo "- [ ] コード品質確認" >> /tmp/comment.md
          echo "- [ ] セキュリティチェック" >> /tmp/comment.md
          echo "- [ ] テスト実行" >> /tmp/comment.md
          echo "- [ ] ドキュメント更新" >> /tmp/comment.md
          echo "" >> /tmp/comment.md
          echo "---" >> /tmp/comment.md
          echo "🤖 **自動生成レポート**" >> /tmp/comment.md
          
          # ファイル内容をGitHub Actions出力変数に設定
          echo "MARKDOWN_COMMENT<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/comment.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # =========================================================================
      # Step 5: PRへのシンプルコメント投稿
      # =========================================================================
      # 目的: echoで作成したマークダウンをPRにコメント投稿
      - name: Post Simple Markdown Comment
        uses: actions/github-script@v7  # GitHubAPIを簡単に使えるアクション
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}  # 自動提供される認証トークン
          script: |
            // 前ステップで生成したマークダウンコメントを取得
            const markdownComment = `${{ steps.markdown.outputs.MARKDOWN_COMMENT }}`;
            
            // GitHub REST APIを使ってPRにコメント投稿
            github.rest.issues.createComment({
              issue_number: context.issue.number,  // PR番号
              owner: context.repo.owner,           // リポジトリ所有者
              repo: context.repo.repo,             // リポジトリ名
              body: markdownComment                // コメント本文
            });

      # =========================================================================
      # Step 6: 完了メッセージ
      # =========================================================================
      # 目的: ワークフロー完了をログに記録
      - name: Test Complete
        run: |
          echo "✅ PR Test Workflow completed successfully!"
          echo "🎨 Rich markdown comment with Mermaid diagrams posted!"
          echo "🎉 Ready for Claude Code integration!"